from src.clients.sqllite import SQLiteClient
import gradio as gr
import pandas as pd
import yfinance as yf
from datetime import datetime

current_most_active_query = """
SELECT
    ticker,
    action
FROM
    data
WHERE
    current_date = (SELECT MAX(current_date) FROM data);
"""

client = SQLiteClient(db_path='main.db')

def create_tab():
    with gr.TabItem("Current Picks"):
        with gr.Row():
            # Left column (1/3 width)
            with gr.Column(scale=1):
                refresh_button = gr.Button("Refresh Data")
                output_table = gr.DataFrame(label="Most Recent Active Stocks")
                
                def refresh_table():
                    try:
                        results = client.query(current_most_active_query)
                        if isinstance(results, pd.DataFrame):
                            df = results
                        elif isinstance(results, list):
                            df = pd.DataFrame(results)
                        else:
                            raise TypeError("Unsupported result type from query_database")
                        
                        if not df.empty and 'current_date' in df.columns:
                            return df
                        else:
                            return df
                    except Exception as e:
                        print(f"Error executing query: {e}")
                        return pd.DataFrame({"Error": [str(e)]})

                # Fetch initial data
                initial_df = refresh_table()
                output_table.value = initial_df
                
                # Create dropdown with initial choices
                ticker_dropdown = gr.Dropdown(
                    choices=["select ticker"] + initial_df['ticker'].tolist() if not initial_df.empty and 'ticker' in initial_df.columns else ["select ticker"],
                    label="Select a Ticker",
                    value="select ticker"
                )
            
            # Right column (2/3 width)
            with gr.Column(scale=2):
                date_text = gr.Textbox(label="Date of pick")
                price_text = gr.Textbox(label="Current Price (Provided by Yahoo Finance)")
                action_text = gr.Textbox(label="Action (Generated by LLM)")
                additional_data_text = gr.Textbox(label="Explanation (Generated by LLM)")

        def get_stock_price_and_data(selected_ticker):
            if selected_ticker == "select ticker":
                return "Please select a ticker", "", "Please select a ticker from the dropdown."
            
            try:
                # Get stock price
                stock = yf.Ticker(selected_ticker)
                try:
                    current_price = stock.info['regularMarketPrice']
                    if current_price is None:
                        current_price = stock.info['previousClose']
                except:
                    current_price = stock.info.get('previousClose', 'Price not available')
                
                price_display = f"${current_price:.2f}" if isinstance(current_price, (float, int)) else str(current_price)
                
                # Get explanation and action
                additional_data_query = f"SELECT explanation, action, current_date FROM data WHERE ticker = '{selected_ticker}' AND current_date = (SELECT MAX(current_date) FROM data)"  # Added current_date filter
                additional_data = client.query(additional_data_query)
                
                if isinstance(additional_data, pd.DataFrame):
                    df_additional = additional_data
                elif isinstance(additional_data, list):
                    df_additional = pd.DataFrame(additional_data)
                else:
                    raise TypeError("Unsupported result type from query_database")
                
                explanation_text = ""
                action_text = ""
                date_text = ""
                if not df_additional.empty:
                    date_text = df_additional['current_date'].iloc[0]
                    explanation_text = df_additional['explanation'].iloc[0]
                    action_text = df_additional['action'].iloc[0]
                else:
                    date_text = "No date found"
                    explanation_text = "No explanation found for this ticker for the most recent date." # More specific message
                    action_text = "No action found for this ticker for the most recent date."
                
                return date_text, price_display, action_text, explanation_text
                
            except Exception as e:
                print(f"Error fetching data: {e}")
                return "Error fetching price", "", f"Error: {e}"

        # Function to update dropdown choices
        def update_dropdown_choices():
            df = refresh_table()
            ticker_dropdown.choices = ["select ticker"] + df['ticker'].tolist() if not df.empty and 'ticker' in df.columns else ["select ticker"]
            return df, ticker_dropdown # Return the updated dropdown

        # Connect the refresh button to update both table and dropdown
        refresh_button.click(
            fn=update_dropdown_choices,
            outputs=[output_table, ticker_dropdown] # Output the dropdown
        )

        # Connect the ticker dropdown to update both price, explanation, and action
        ticker_dropdown.change(
            fn=get_stock_price_and_data,
            inputs=ticker_dropdown,
            outputs=[date_text, price_text, action_text, additional_data_text]
        )